# This workflow will build a Java project with Maven

name: Java CI with Maven

on:
  push:
    branches: [ codecoverage_actions ]
  pull_request:
    branches: [ codecoverage_actions ]
#   schedule:
#   - cron: "30 1 * * *"
#   - cron: '*/10 * * * *'    #run every 10 minutes. 
  
  
env:
  UNIT_TESTS_REPORT_FILENAME: "jacoco-reports-${{ github.run_id }}"
  REQUIRED_CODE_COVERAGE_PERCENT: 80
  ONARQUBE_URL: http://vdiokcqa03wxv:9000
  SONARQUBE_PUBLIC_URL: http://vdiokcqa03wxv:9000
  serviceName: $(xmllint --xpath '/*[local-name()="project"]/*[local-name()="artifactId"]/text()' pom.xml)
#   10.248.227.69 VDI3 ip
  SONARQUBE_URL: http://vdiokcqa03wxv:9000
#   SONARQUBE_PUBLIC_URL: https://sonar.us-mvr-dev.azure.lnrsg.io
  
#   SONAR_SCANNER_VERSION: 4.6.1.2450


jobs:
  build:
    runs-on: ubuntu-latest
#     runs-on: macos-latest
#     runs-on: windows-latest
      
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
 
    - name: Install Chrome    
      run: |
       sudo apt install google-chrome-stable
#     - name: Install Google Chrome Using Shell  Script 
#       run: |
#        chmod +x ./myScripts/InstallChrome.sh
#         ./myScripts/InstallChrome.sh    
  
#     - name: Run Security Checks
#       run: bash myScripts/security_checks.sh
  
    - name: Install xmllint tool
      shell: bash
      run: |
        sudo apt-get install libxml2-utils
    - name: Setup sonar scanner
      uses: warchant/setup-sonar-scanner@v3
      
      

    - name: Run sonar scanner and push result to LNI's Sonarqube
      uses: romeovs/lcov-reporter-action@v0.2.16
      with:
        lcov-file: ./coverage/lcov.info
        
        
        

    - name: Run sonar scanner and push result to LNI's Sonarqube
      continue-on-error: true
      env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      run: |
          sonar-scanner -Dsonar.login="${{ secrets.SONAR_TOKEN }}" \
            -Dsonar.host.url="${{ env.SONARQUBE_URL }}" \
            -Dsonar.projectKey="${{ needs.prepare.outputs.serviceName }}" \
            -Dsonar.projectVersion="${{ needs.prepare.outputs.serviceVersion }}" \
            -Dsonar.java.binaries=target/test-classes/**/* \
            -Dsonar.language=java \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.exclusions="*.js, src/test/bdd/**, grpc-client/**"
 #           -Dsonar.coverage.exclusions="src/test/**/*" \
    - name: Getting sonar quality gate result for the project
      id: sonar_json_result
      shell: bash
      run: |
          projectStatusJson=$(curl -u ${{ secrets.SONAR_TOKEN }}: "${{ env.SONARQUBE_URL }}/api/qualitygates/project_status?projectKey=${{ env.serviceName }}")
          echo $projectStatusJson
          echo "::set-output name=result::$projectStatusJson"
    - name: Parsing sonarqube result
      id: sonar_result
      shell: bash
      run: |
          echo ${{ steps.sonar_json_result.outputs.result }}
          echo ${{ fromJSON(steps.sonar_json_result.outputs.result) }}
          projectStatus=${{ fromJSON(steps.sonar_json_result.outputs.result).projectStatus.status }}
          if [[ $projectStatus =~ "ERROR" ]]; then
            sonarResult="failure"
          else
            sonarResult="success"
          fi
          echo "::set-output name=result::$sonarResult"
    - name: Add check action for sonarqube result
      uses: LouisBrunner/checks-action@v1.1.1
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "[sonarqube] Code quality result"
          conclusion: ${{ steps.sonar_result.outputs.result }}
          output: |
            {
              "summary": "Sonarqube code quality scan's result is ${{ steps.sonar_result.outputs.result }}",
              "text_description": "For more details visit this [link](${{ env.SONARQUBE_PUBLIC_URL }}/dashboard?id=${{ env.serviceName }})"
            }




    - name: Build with Maven
      run: mvn test -q
      
    - name: Archive Test Results
      uses: actions/upload-artifact@v2
      with:
        name: Automation-test-reports
        path: |
          target/
          Logs/

#     - name: Security Check Results
#       uses: actions/upload-artifact@v2
#       with:
#         name: security-check-report
#         path: 
#           security_checks_log.txt
